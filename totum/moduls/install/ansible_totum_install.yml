---

- hosts: localhost
  become: true

  tasks:

  # Ubuntu version, local and timezone

  - name: Check if the distribution is Ubuntu and version is 24.04
    fail:
      msg: "This playbook only supports Ubuntu 24.04."
    when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '24.04'

  - name: Continue with tasks if the distribution and version are correct
    debug:
      msg: "The distribution is Ubuntu 24.04. Proceeding with tasks."

  - name: Ensure locales package is installed
    apt:
      name: locales
      state: present

  - name: Check if LANG=en_US.UTF-8 is set
    shell: locale | grep -c 'LANG=en_US.UTF-8'
    register: locale_check

  - name: Fail if LANG=en_US.UTF-8 is not set
    fail:
      msg: "LANG=en_US.UTF-8 is not set in the locale configuration"
    when: locale_check.stdout | int == 0

  - name: Set the timezone
    command: timedatectl set-timezone {{ lookup('env', 'TOTUMTIMEZONE') }}

  # Add PPA and some packages

  - name: apt install some common packages
    apt:
      name:
        - git
        - unzip
        - curl
        - nano
        - htop
        - wget
        - certbot
        - ufw
      state: latest

  - name: Add PHP repository
    apt_repository:
      repo: ppa:ondrej/php
      state: present

  - name: Add PostgreSQL repository to sources list
    lineinfile:
      path: /etc/apt/sources.list.d/pgdg.list
      line: "deb [trusted=yes] http://apt.postgresql.org/pub/repos/apt noble-pgdg main"
      create: yes

  - name: Add the MeiliSearch repository to the sources list
    lineinfile:
      path: /etc/apt/sources.list.d/fury.list
      line: 'deb [trusted=yes] https://apt.fury.io/meilisearch/ /'
      create: yes
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Apt update
    apt:
      update_cache: yes

  - name: Deny all incoming connections by default
    ufw:
      default: deny
      direction: incoming

  - name: Allow all outgoing connections by default
    ufw:
      default: allow
      direction: outgoing

  - name: Allow HTTP traffic on port 22
    ufw:
      rule: allow
      port: 22
      proto: tcp

  - name: Allow HTTP traffic on port 80
    ufw:
      rule: allow
      port: 80
      proto: tcp

  - name: Allow HTTPS traffic on port 443
    ufw:
      rule: allow
      port: 443
      proto: tcp

  - name: Ensure UFW is enabled
    ufw:
      state: enabled

  # Chek IP

  - name: Check CERTBOTDOMAIN environment variable
    set_fact:
      check_domain: "{{ lookup('env', 'CERTBOTDOMAIN') }}"

  - name: Check TOTUMSERVIP environment variable if CERTBOTDOMAIN is empty
    set_fact:
      check_ip: "{{ lookup('env', 'TOTUMSERVIP') }}"

  - name: Determine external IP if CERTBOTDOMAIN and TOTUMSERVIP are empty
    set_fact:
      external_ip: "{{ ansible_default_ipv4.address }}"
    when: check_domain == "" and check_ip == ""

  - name: Show determined external IP and confirm
    pause:
      prompt: "Determined external IP is '{{ external_ip }}'. Is this the correct external IP of the server? Type (A) or (N)"
    register: ip_confirmation
    when: check_domain == "" and check_ip == ""

  - name: Fail if the user gave an incorrect answer
    fail:
      msg: "Aborted by user"
    when: check_domain == "" and check_ip == "" and ip_confirmation.user_input is defined and (ip_confirmation.user_input | lower) not in ['a', 'n']

  - name: Prompt for correct external IP if necessary
    pause:
      prompt: "Please enter the correct external IP"
    register: new_external_ip
    when: check_domain == "" and check_ip == "" and ip_confirmation.user_input is defined and (ip_confirmation.user_input | lower) == 'n'

  - name: Confirm entered external IP
    pause:
      prompt: "You entered '{{ new_external_ip.user_input }}'. If this is correct, type (A) or cancel (Ctrl + C)"
    register: confirm_correct_ip
    when: check_domain == "" and check_ip == "" and ip_confirmation.user_input is defined and (ip_confirmation.user_input | lower) == 'n'

  - name: Fail if user did not confirm correct IP
    fail:
      msg: "Aborted by user"
    when: confirm_correct_ip.user_input is defined and (confirm_correct_ip.user_input | lower) != 'a' and check_domain == "" and check_ip == "" and ip_confirmation.user_input is defined and (ip_confirmation.user_input | lower) == 'n'

  - name: Set final external IP
    set_fact:
      external_ip: "{{ new_external_ip.user_input }}"
    when: check_domain == "" and check_ip == "" and new_external_ip.user_input is defined

  - name: Append TOTUMSERVIP to totum_install_vars
    lineinfile:
      path: "{{ playbook_dir }}/totum_install_vars"
      line: "export TOTUMSERVIP={{ external_ip }}"
    when: check_domain == "" and check_ip == ""

  - name: Set variable for external IP
    set_fact:
      ip_for_install: "{{ lookup('env', 'TOTUMSERVIP') if check_ip != '' else external_ip }}"
    when: check_domain == ""

  # Get a certificate

  - name: Check IPDOMAIN environment variable
    set_fact:
      check_ip_domain: "{{ lookup('env', 'IPDOMAIN') }}"

  - name: Check for certbot certificate directory
    stat:
      path: /etc/letsencrypt/live/{{ lookup('env', 'CERTBOTDOMAIN') }}
    register: certbot_certificate_directory
    when: check_domain != ""

  - name: Certificate exist
    debug:
      msg: "Certificate exist!"
    when: certbot_certificate_directory.stat is defined and certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Stop Nginx service
    service:
      name: nginx
      state: stopped
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Run certbot dry run for check domain
    shell: "certbot certonly --standalone --dry-run --non-interactive --register-unsafely-without-email --agree-tos -d {{ lookup('env', 'CERTBOTDOMAIN') }}"
    register: certbot_check_domain_result
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Debug certbot check domain result
    debug:
      msg: "{{ certbot_check_domain_result.stdout }}"
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Check for success message in certbot output
    assert:
      that:
        - "'The dry run was successful.' in certbot_check_domain_result.stdout"
      fail_msg: "Certbot did't get certificate for you domain! Check DNS for you domain and try again later! If you setup NS or DNS less than 3 hours ago, maybe these changes have not reached the Let's encrypt servers. Wait one hour and try again."
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Check for Certbot registration directory
    stat:
      path: /etc/letsencrypt/accounts/acme-v02.api.letsencrypt.org/directory
    register: certbot_registration
    when: check_domain != ""

  - name: Certbot is registered
    debug:
      msg: "Certbot is registered!"
    when: certbot_certificate_directory.stat is defined and certbot_registration.stat.exists and check_domain != ""

  - name: Run certbot registration
    shell: "certbot register --email {{ lookup('env', 'CERTBOTEMAIL') }} --agree-tos --no-eff-email"
    register: certbot_registration_result
    when: certbot_certificate_directory.stat is defined and not certbot_registration.stat.exists and check_domain != ""

  - name: Debug certbot registration result
    debug:
      msg: "{{ certbot_registration_result.stdout }}"
    when: certbot_certificate_directory.stat is defined and not certbot_registration.stat.exists and check_domain != ""

  - name: Run certbot to obtain a certificate
    shell: "certbot certonly --standalone --non-interactive -d {{ lookup('env', 'CERTBOTDOMAIN') }}"
    register: certbot_certificate_result
    ignore_errors: no
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Debug certbot certificate result
    debug:
      msg: "{{ certbot_certificate_result.stdout }}"
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Check for success message in certbot certificate output
    assert:
      that:
        - "'Successfully received certificate.' in certbot_certificate_result.stdout"
      fail_msg: "Certbot did't get certificate for you domain!"
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != ""

  - name: Final check for certbot certificate directory
    stat:
      path: /etc/letsencrypt/live/{{ lookup('env', 'CERTBOTDOMAIN') }}
    register: certbot_certificate_final_check
    when: check_domain != ""

  - name: Fail if certbot certificate directory does not exist
    fail:
      msg: "Certbot directory for domain {{ lookup('env', 'CERTBOTDOMAIN') }} does not exist. Please ensure Certbot is registered and the certificate has been obtained."
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_final_check.stat.exists and check_domain != ""

  - name: Create Certbot CLI configuration file
    copy:
      dest: /etc/letsencrypt/cli.ini
      content: |
        authenticator = webroot
        webroot-path = /var/www/html
        post-hook = service nginx reload
        text = True
      owner: root
      group: root
    when: check_domain != ""

  - name: Start Nginx service
    service:
      name: nginx
      state: started
    when: certbot_certificate_directory.stat is defined and not certbot_certificate_directory.stat.exists and check_domain != "" and check_ip != "" and check_ip_domain == ""

  # Create a user

  - name: Create group totum
    group:
      name: totum
      state: present

  - name: Add user totum
    user:
      name: totum
      group: totum
      shell: /bin/bash
      state: present
      create_home: yes

  - name: Set permissions for the home directory of user totum
    file:
      path: /home/totum
      state: directory
      mode: '0755'

  # Install PHP and modules

  - name: apt install PHP 8.3 and modules
    apt:
      name:
        - php8.3
        - php8.3-bcmath
        - php8.3-cli
        - php8.3-curl
        - php8.3-fpm
        - php8.3-gd
        - php8.3-mbstring
        - php8.3-opcache
        - php8.3-pgsql
        - php8.3-xml
        - php8.3-zip
        - php8.3-soap
        - php8.3-ldap
      state: latest

  - name: Check if totum_fpm.conf file exists
    stat:
      path: /etc/php/8.3/fpm/pool.d/totum.conf
    register: totum_fpm_conf

  - name: Download totum_fpm.conf
    get_url:
      url: https://raw.githubusercontent.com/totumonline/totum-mit/master/totum/moduls/install/totum_pool.conf
      dest: /etc/php/8.3/fpm/pool.d/totum.conf
      owner: root
      group: root
    when: not totum_fpm_conf.stat.exists

  - name: Replace timezone in totum.conf
    replace:
      path: /etc/php/8.3/fpm/pool.d/totum.conf
      regexp: 'Europe/London'
      replace: "{{ lookup('env', 'TOTUMTIMEZONE') }}"
    when: not totum_fpm_conf.stat.exists

  - name: Create sessions_totum directory
    file:
      path: /var/lib/php/sessions_totum
      state: directory
      owner: root
      group: root
      mode: '1733'

  - name: Remove default www.conf
    file:
      path: /etc/php/8.3/fpm/pool.d/www.conf
      state: absent

  - name: Restart PHP FPM service
    service:
      name: php8.3-fpm
      state: restarted

  # Install Nginx

  - name: apt install nginx
    apt:
      name: nginx
      state: latest

  - name: Check if totum.online.conf file exists
    stat:
      path: /etc/nginx/sites-available/totum.online.conf
    register: totum_online_conf

  - name: Create directory for acme-challenge
    file:
      path: /var/www/html/.well-known/acme-challenge
      state: directory
      owner: root
      group: root

  - name: Remove default Nginx site configuration (available)
    file:
      path: /etc/nginx/sites-available/default
      state: absent

  - name: Remove default Nginx site configuration (enabled)
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent

  - name: Create Nginx acme configuration file
    copy:
      dest: /etc/nginx/acme
      content: |
        location /.well-known {
            root /var/www/html;
        }

  # Actions for domain or ip install

  - name: Download totum.online.conf
    get_url:
      url: https://raw.githubusercontent.com/totumonline/totum-mit/master/totum/moduls/install/totum.online.conf
      dest: /etc/nginx/sites-available/totum.online.conf
      owner: root
      group: root
    when: not totum_online_conf.stat.exists and check_domain != ""

  - name: Download totum.online.conf.ip
    get_url:
      url: https://raw.githubusercontent.com/totumonline/totum-mit/master/totum/moduls/install/totum.online.conf.ip
      dest: /etc/nginx/sites-available/totum.online.conf
      owner: root
      group: root
    when: not totum_online_conf.stat.exists and check_domain == ""

  - name: Replace domain in totum.online.conf
    replace:
      path: /etc/nginx/sites-available/totum.online.conf
      regexp: 'YOUR_DOMAIN'
      replace: "{{ lookup('env', 'CERTBOTDOMAIN') }}"
    when: check_domain != ""

  # Restart nginx

  - name: Create symlink for Totum Nginx configuration
    file:
      src: /etc/nginx/sites-available/totum.online.conf
      dest: /etc/nginx/sites-enabled/totum.online.conf
      state: link

  - name: Restart Nginx service
    service:
      name: nginx
      state: restarted

  # Install PostgreSQL

  - name: apt install postgresql
    apt:
      name: postgresql-17
      state: present

  - name: apt install python3-psycopg2
    apt:
      name: python3-psycopg2
      state: present

  - name: Create PostgreSQL user
    become_user: postgres
    postgresql_user:
      name: "totum"
      password: "{{ lookup('env', 'TOTUMBASEPASS') }}"
      encrypted: yes
      state: present

  - name: Create PostgreSQL database
    become_user: postgres
    postgresql_db:
      name: "totum"
      owner: "totum"
      state: present

  - name: Grant all privileges on database totum to user totum
    become_user: postgres
    postgresql_privs:
      db: "totum"
      role: "totum"
      privs: ALL
      type: database
      state: present

  # Install Totum

  - name: Check if totum-mit directory exists
    stat:
      path: /home/totum/totum-mit
    register: totum_mit

  - name: Clone Totum repository
    git:
      repo: https://github.com/totumonline/totum-mit.git
      dest: /home/totum/totum-mit
      version: master
      update: yes
    become_user: totum
    when: not totum_mit.stat.exists

  - name: Check if composer.phar file exists
    stat:
      path: /home/totum/totum-mit/composer.phar
    register: composer_phar

  - name: Download Composer installer
    get_url:
      url: https://getcomposer.org/installer
      dest: /home/totum/totum-mit/composer-setup.php
      owner: totum
      group: totum
    when: not composer_phar.stat.exists

  - name: Unpack Composer installer
    shell: php /home/totum/totum-mit/composer-setup.php --quiet
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
      executable: /bin/bash
    when: not composer_phar.stat.exists

  - name: Run Composer install
    shell: php /home/totum/totum-mit/composer.phar install --no-dev
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
      executable: /bin/bash

  - name: Check if CLI.totum.php.ini file exists
    stat:
      path: /home/totum/totum-mit/CLI.totum.php.ini
    register: cli_totum_php_ini

  - name: Create CLI.totum.php.ini file
    copy:
      dest: /home/totum/totum-mit/CLI.totum.php.ini
      content: |
        opcache.enable_cli = 1
        opcache.memory_consumption = 256M
        date.timezone = Europe/London
      owner: totum
      group: totum
      mode: '0664'
    when: not cli_totum_php_ini.stat.exists

  - name: Replace timezone in CLI.totum.php.ini
    replace:
      path: /home/totum/totum-mit/CLI.totum.php.ini
      regexp: 'Europe/London'
      replace: "{{ lookup('env', 'TOTUMTIMEZONE') }}"

  - name: Check if Conf.php file exists
    stat:
      path: /home/totum/totum-mit/Conf.php
    register: conf_php

  - name: Set install_url based on check_domain
    set_fact:
      install_url: "{{ lookup('env', 'CERTBOTDOMAIN') if check_domain != '' else ip_for_install }}"

  - name: Show install_url variable
    debug:
      msg: "The install_url is: {{ install_url }}"

  - name: Install totum via bin/totum install tool
    shell: bin/totum install --pgdump=pg_dump --psql=psql -e -- {{ lookup('env', 'TOTUMLANG') }} totum {{ lookup('env', 'CERTBOTEMAIL') }} {{ install_url }} admin {{ lookup('env', 'TOTUMADMINPASS') }} totum localhost totum {{ lookup('env', 'TOTUMBASEPASS') }}
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
      executable: /bin/bash
    when: not conf_php.stat.exists
    register: totum_install_output

  - name: Display totum install output
    debug:
      msg: "{{ totum_install_output.stdout }}"
    when: not conf_php.stat.exists

  - name: Check if Crypto.key file exists
    stat:
      path: /home/totum/totum-mit/Crypto.key
    register: crypto_key

  - name: Generate Crypto.key
    shell: openssl rand -base64 64 > /home/totum/totum-mit/Crypto.key
    become_user: totum
    args:
      executable: /bin/bash
    when: not crypto_key.stat.exists

  - name: Update secure setting in Conf.php if check_domain is not empty
    replace:
      path: /home/totum/totum-mit/Conf.php
      regexp: "\\/\\*'secure' => true,\\*\\/"
      replace: "'secure' => true,"
    when: check_domain != ""

  # Switch to the PRO repository

  - name: Set Git remote URL to PRO repository
    shell: git remote set-url origin https://github.com/totumonline/totum-pro.git
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Check current Git branch
    shell: git rev-parse --abbrev-ref HEAD
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
    register: current_branch
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Fetch data from origin pro
    shell: git fetch origin pro
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
    when: lookup('env', 'TOTUMVERSION') == 'pro' and current_branch.stdout != "pro"

  - name: Checkout to new branch pro
    shell: git checkout -b pro origin/pro -t
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
    when: lookup('env', 'TOTUMVERSION') == 'pro' and current_branch.stdout != "pro"

  - name: Pull latest scripts
    shell: git pull
    become_user: totum
    args:
      chdir: /home/totum/totum-mit
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  # Add totum-gom service

  - name: Create symlink for Totum service configuration
    file:
      src: /home/totum/totum-mit/totum-gom.service
      dest: /etc/systemd/system/totum-gom.service
      state: link
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Reload systemd manager configuration
    systemd:
      daemon_reload: yes
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Enable totum-gom service
    systemd:
      name: totum-gom
      enabled: yes
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Start totum-gom service
    systemd:
      name: totum-gom
      state: started
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Check totum-gom service status
    systemd:
      name: totum-gom
      state: started
      enabled: yes
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Add sudoers entry for totum-gom restart
    lineinfile:
      path: /etc/sudoers.d/restart-totum-gom
      line: 'totum ALL=(ALL) NOPASSWD: /usr/sbin/service totum-gom restart'
      create: yes
      mode: '0440'
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Add sudoers entry for totum-gom start
    lineinfile:
      path: /etc/sudoers.d/restart-totum-gom
      line: 'totum ALL=(ALL) NOPASSWD: /usr/sbin/service totum-gom start'
      create: yes
      mode: '0440'
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Add sudoers entry for totum-gom stop
    lineinfile:
      path: /etc/sudoers.d/restart-totum-gom
      line: 'totum ALL=(ALL) NOPASSWD: /usr/sbin/service totum-gom stop'
      create: yes
      mode: '0440'
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Add sudoers entry for totum-gom status
    lineinfile:
      path: /etc/sudoers.d/restart-totum-gom
      line: 'totum ALL=(ALL) NOPASSWD: /usr/sbin/service totum-gom status'
      create: yes
      mode: '0440'
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  # Add Crons

  - name: Generate a random minute for cron job
    set_fact:
      random_minute: "{{ 1 + (59 | random) }}"

  - name: Add cron job for certbot renew with random minute
    cron:
      name: "certbot-renew"
      minute: "{{ random_minute }}"
      hour: "*/12"
      day: "*"
      month: "*"
      weekday: "*"
      user: "root"
      job: "certbot renew --quiet --allow-subset-of-names"
    when: check_domain != ""

  - name: Add cron job for totum schemas-crons
    cron:
      name: "bin/totum schemas-crons"
      minute: "*"
      hour: "*"
      day: "*"
      month: "*"
      weekday: "*"
      user: "totum"
      job: "cd /home/totum/totum-mit/ && bin/totum schemas-crons"

  - name: Add cron job for totum clean-tmp-dir
    cron:
      name: "bin/totum clean-tmp-dir"
      minute: "*/10"
      hour: "*"
      day: "*"
      month: "*"
      weekday: "*"
      user: "totum"
      job: "cd /home/totum/totum-mit/ && bin/totum clean-tmp-dir"

  - name: Add cron job for totum clean-schemas-tmp-tables
    cron:
      name: "bin/totum clean-schemas-tmp-tables"
      minute: "*/10"
      hour: "*"
      day: "*"
      month: "*"
      weekday: "*"
      user: "totum"
      job: "cd /home/totum/totum-mit/ && bin/totum clean-schemas-tmp-tables"

  - name: Add cron job for totum clean-tmp-tables-files-multi
    cron:
      name: "bin/totum clean-tmp-tables-files-multi"
      minute: "0"
      hour: "*/3"
      day: "*"
      month: "*"
      weekday: "*"
      user: "totum"
      job: "cd /home/totum/totum-mit/ && bin/totum clean-tmp-tables-files-multi"

  - name: Add cron job for totum switch-off-extra-notifications
    cron:
      name: "bin/totum switch-off-extra-notifications"
      minute: "20"
      hour: "3"
      day: "*"
      month: "*"
      weekday: "*"
      user: "totum"
      job: "cd /home/totum/totum-mit/ && bin/totum switch-off-extra-notifications 50"

  # Set execSSH for PRO

  - name: Check TOTUMEXECSSH environment variable
    set_fact:
      exec_ssh: "{{ lookup('env', 'TOTUMEXECSSH') }}"
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Confirm activating execSSH
    pause:
      prompt: "If you want to activate execSSH type (A), if not (N)"
    register: check_exec_ssh
    when: exec_ssh is defined and exec_ssh == "" and lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Activating execSSH in Conf.php
    replace:
      path: /home/totum/totum-mit/Conf.php
      regexp: "'inner'"
      replace: "true"
    when: exec_ssh is defined and exec_ssh == "" and lookup('env', 'TOTUMVERSION') == 'pro' and (check_exec_ssh.user_input | lower) == 'a'

  - name: Append execSSH to totum_install_vars
    lineinfile:
      path: "{{ playbook_dir }}/totum_install_vars"
      line: "export TOTUMEXECSSH=true"
    when: exec_ssh is defined and exec_ssh == "" and lookup('env', 'TOTUMVERSION') == 'pro'

  # Install Meilisearch

  - name: apt install meilisearch-http
    apt:
      name: meilisearch-http
      state: present
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Hold meilisearch-http package
    command: apt-mark hold meilisearch-http
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Check if meili_masterkey file exists
    stat:
      path: /home/totum/meili_masterkey
    register: meili_masterkey
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Generate a random masterkey
    set_fact:
      random_string: "{{ lookup('password', '/dev/null', length=24) }}"
    when: meili_masterkey.stat is defined and not meili_masterkey.stat.exists and lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Write the masterkey to a file
    copy:
      content: "{{ random_string }}"
      dest: /home/totum/meili_masterkey
    become_user: totum
    when: meili_masterkey.stat is defined and not meili_masterkey.stat.exists and lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Check if MeiliSearch is running
    shell: ps aux | grep meilisearch | grep -v grep | wc -l
    register: meilisearch_running
    ignore_errors: true
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Display Meilisearch process count
    debug:
      msg: "{{ meilisearch_running.stdout }}"
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Start MeiliSearch if not running
    shell: meilisearch --no-analytics --db-path ./meilifiles --env production --master-key $(cat meili_masterkey) &
    become_user: totum
    args:
      chdir: /home/totum
      executable: /bin/bash
    when: meilisearch_running.stdout is defined and meilisearch_running.stdout | int == 0 and lookup('env', 'TOTUMVERSION') == 'pro'

  - name: Add MeiliSearch start command to crontab for user totum
    cron:
      name: "Start MeiliSearch at reboot"
      user: totum
      special_time: reboot
      job: "cd ~ && exec meilisearch --no-analytics --db-path ./meilifiles --env production --master-key $(cat meili_masterkey) > /dev/null 2>&1 &"
    when: lookup('env', 'TOTUMVERSION') == 'pro'

  # Change IP to DOMAIN

  - name: Check IPDOMAIN environment variable
    set_fact:
      check_ip_domain: "{{ lookup('env', 'IPDOMAIN') }}"

  - name: Check if file folder exists
    stat:
      path: /home/totum/totum-mit/totum/fls/{{ lookup('env', 'TOTUMSERVIP') }}
    register: file_folder
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Check if secureFiles folder exists
    stat:
      path: /home/totum/totum-mit/secureFiles/{{ lookup('env', 'TOTUMSERVIP') }}
    register: secure_file_folder
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Switch IP to Domain - Download totum.online.conf
    get_url:
      url: https://raw.githubusercontent.com/totumonline/totum-mit/master/totum/moduls/install/totum.online.conf
      dest: /etc/nginx/sites-available/totum.online.conf
      owner: root
      group: root
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Switch IP to Domain - Replace domain in totum.online.conf
    replace:
      path: /etc/nginx/sites-available/totum.online.conf
      regexp: 'YOUR_DOMAIN'
      replace: "{{ lookup('env', 'CERTBOTDOMAIN') }}"
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Replace IP with DOMAIN in Conf.php
    replace:
      path: /home/totum/totum-mit/Conf.php
      regexp: "{{ lookup('env', 'TOTUMSERVIP') }}"
      replace: "{{ lookup('env', 'CERTBOTDOMAIN') }}"
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Move totum fls directory
    command: mv /home/totum/totum-mit/totum/fls/{{ lookup('env', 'TOTUMSERVIP') }} /home/totum/totum-mit/totum/fls/{{ lookup('env', 'CERTBOTDOMAIN') }}
    when: file_folder.stat is defined and file_folder.stat.exists and check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Move secureFiles directory
    command: mv /home/totum/totum-mit/secureFiles/{{ lookup('env', 'TOTUMSERVIP') }} /home/totum/totum-mit/secureFiles/{{ lookup('env', 'CERTBOTDOMAIN') }}
    when: secure_file_folder.stat is defined and secure_file_folder.stat.exists and check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Restart Nginx service
    service:
      name: nginx
      state: restarted
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  - name: Append IPDOMAIN to totum_install_vars
    lineinfile:
      path: "{{ playbook_dir }}/totum_install_vars"
      line: "export IPDOMAIN=true"
    when: check_domain != "" and check_ip != "" and check_ip_domain == ""

  # Final

  - name: Show installation completion message
    debug:
      msg: "NOW YOU CAN OPEN YOUR BROWSER AT HTTP://{{ install_url }} AND LOGIN AS admin AND {{ lookup('env', 'TOTUMADMINPASS') }}"

  - name: Ask to upgrade software on the server
    pause:
      prompt: "Do you want to upgrade the software on the server? If yes, type (A) or (N)"
    register: upgrade_response

  - name: Perform apt upgrade if user agreed
    apt:
      upgrade: safe
    when: upgrade_response.user_input | lower == 'a'
